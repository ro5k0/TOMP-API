  /bookings/options:
    get:
      description: Returns available transport options for given coordinate. Start time can be defined, but is optional. If startTime is not provided, but required by the third party API, a default value of "Date.now()" is used. [from MaaS-API /listing]
      tags:
        - booking
      parameters:
        - name: from
          description: User's location in comma separated form e.g. 60.123,27.456 (lat/long, WGS84)
          in: query
          required: true
          schema:
            type: string
            pattern: ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: radius
          description: Maximum distance a user wants to travel to reach asset in metres, e.g. 500 metres
          in: query
          required: false
          schema:
            type: string
        - name: to
          description: A desired destination e.g. 60.123,27.456 (lat/long, WGS84)
          in: query
          required: false
          schema:
            type: string
            pattern: ^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$
        - name: share
          description: Defines if user can also share a ride
          in: query
          required: false
          schema:
            enum:
            - YES
            - NO
            
      responses:
        '200':
          description: Available transport methods matching the given query parameters. If no transport methods are available, an empty array is returned.
          content:
            application/json:
              schema:
                name: options
                type: array
                description: Available transport options for the queried TSP
                items:
                $ref: '#/components/schemas/options'
        '400':
          description: If coordinates given in the request are invalid the server returns
            400 Bad request as a response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
                
  /bookings/:
    get:
      description: Returns the `Booking` that has been created earlier
      tags:
        - booking
      parameters:
        - name: state
          description: The state of the booking to fetch
          in: query
          required: true
          schema:
            type: string
            enum: [BOOKED, CANCELLED, PAID, UPDATE-REQUESTED, UPDATED, STARTED, FINISHED]
      responses:
        '200':
          description: The bookings matching the query
          content:
            application/json:
              schema:
                type: array
                description: The bookings that matched the query (zero or more)
                minItems: 0
                items:
                  $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid query parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-serverless-endpoint: echo~GET
    post:
      description: Creates a new `Booking` for the TSP in **booked** state. The returned
        object will be a reference that is passed back & forth throughout the
        booking life cycle.
        The Booking may be modified in the response, e.g. location being
        adjusted for a more suitable pick-up location.
        In addition, the service may contain a **meta** attribute for arbitrary
        TSP metadata that the TSP needs later, and **token** attribute depicting
        how long the current state is valid.
      tags:
        - booking
      responses:
        '200':
          description: A new booking was succesfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new-booking'
        description: New `Booking` data
        required: true
      parameters: []
  /bookings/{id}:
    get:
      description: Returns the `Bookings` that have been created through the system.
      tags:
        - booking
      parameters:
        - name: id
          in: path
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The booking was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        '400':
          description: Bad request (invalid query or body parameters)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Authorization error (invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: The booking was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      description: Modifies the state of a `Booking`, e.g. **cancels**, **pays** or
        **reschedules** it. The previous booking information is passed forward
        as-is for reference.
      tags:
        - booking
      parameters:
        - name: id
          in: path
          description: Booking identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The booking was modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booking'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/booking'
        description: New `Booking` data
        required: true
